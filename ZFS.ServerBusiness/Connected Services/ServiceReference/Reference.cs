//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZFS.ServerBusiness.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IBaseService")]
    public interface IBaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelByAccount", ReplyAction="http://tempuri.org/IBaseService/GetModelByAccountResponse")]
        byte[] GetModelByAccount(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelByAccount", ReplyAction="http://tempuri.org/IBaseService/GetModelByAccountResponse")]
        System.Threading.Tasks.Task<byte[]> GetModelByAccountAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Logout", ReplyAction="http://tempuri.org/IBaseService/LogoutResponse")]
        byte[] Logout(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Logout", ReplyAction="http://tempuri.org/IBaseService/LogoutResponse")]
        System.Threading.Tasks.Task<byte[]> LogoutAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Login", ReplyAction="http://tempuri.org/IBaseService/LoginResponse")]
        byte[] Login(string account, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/Login", ReplyAction="http://tempuri.org/IBaseService/LoginResponse")]
        System.Threading.Tasks.Task<byte[]> LoginAsync(string account, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetAuthority", ReplyAction="http://tempuri.org/IBaseService/GetAuthorityResponse")]
        byte[] GetAuthority(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetAuthority", ReplyAction="http://tempuri.org/IBaseService/GetAuthorityResponse")]
        System.Threading.Tasks.Task<byte[]> GetAuthorityAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelsByUser", ReplyAction="http://tempuri.org/IBaseService/GetModelsByUserResponse")]
        byte[] GetModelsByUser(byte[] search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelsByUser", ReplyAction="http://tempuri.org/IBaseService/GetModelsByUserResponse")]
        System.Threading.Tasks.Task<byte[]> GetModelsByUserAsync(byte[] search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByUser", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByUserResponse")]
        byte[] GetPagingModelsByUser(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByUser", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByUserResponse")]
        System.Threading.Tasks.Task<byte[]> GetPagingModelsByUserAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByUser", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByUserResponse")]
        byte[] DeleteEntityByUser(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByUser", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByUserResponse")]
        System.Threading.Tasks.Task<byte[]> DeleteEntityByUserAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByUser", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByUserResponse")]
        byte[] UpdateEntityByUser(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByUser", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByUserResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateEntityByUserAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByUser", ReplyAction="http://tempuri.org/IBaseService/AddEntityByUserResponse")]
        byte[] AddEntityByUser(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByUser", ReplyAction="http://tempuri.org/IBaseService/AddEntityByUserResponse")]
        System.Threading.Tasks.Task<byte[]> AddEntityByUserAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByUser", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByUserResponse")]
        byte[] ExistEntityByUser(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByUser", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByUserResponse")]
        System.Threading.Tasks.Task<byte[]> ExistEntityByUserAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetMenuTrees", ReplyAction="http://tempuri.org/IBaseService/GetMenuTreesResponse")]
        byte[] GetMenuTrees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetMenuTrees", ReplyAction="http://tempuri.org/IBaseService/GetMenuTreesResponse")]
        System.Threading.Tasks.Task<byte[]> GetMenuTreesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateMenus", ReplyAction="http://tempuri.org/IBaseService/UpdateMenusResponse")]
        byte[] UpdateMenus(byte[] MenusBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateMenus", ReplyAction="http://tempuri.org/IBaseService/UpdateMenusResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateMenusAsync(byte[] MenusBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelsByMenu", ReplyAction="http://tempuri.org/IBaseService/GetModelsByMenuResponse")]
        byte[] GetModelsByMenu(byte[] search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelsByMenu", ReplyAction="http://tempuri.org/IBaseService/GetModelsByMenuResponse")]
        System.Threading.Tasks.Task<byte[]> GetModelsByMenuAsync(byte[] search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByMenu", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByMenuResponse")]
        byte[] GetPagingModelsByMenu(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByMenu", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByMenuResponse")]
        System.Threading.Tasks.Task<byte[]> GetPagingModelsByMenuAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByMenu", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByMenuResponse")]
        byte[] DeleteEntityByMenu(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByMenu", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByMenuResponse")]
        System.Threading.Tasks.Task<byte[]> DeleteEntityByMenuAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByMenu", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByMenuResponse")]
        byte[] UpdateEntityByMenu(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByMenu", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByMenuResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateEntityByMenuAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByMenu", ReplyAction="http://tempuri.org/IBaseService/AddEntityByMenuResponse")]
        byte[] AddEntityByMenu(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByMenu", ReplyAction="http://tempuri.org/IBaseService/AddEntityByMenuResponse")]
        System.Threading.Tasks.Task<byte[]> AddEntityByMenuAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByMenu", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByMenuResponse")]
        byte[] ExistEntityByMenu(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByMenu", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByMenuResponse")]
        System.Threading.Tasks.Task<byte[]> ExistEntityByMenuAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetGroups", ReplyAction="http://tempuri.org/IBaseService/GetGroupsResponse")]
        byte[] GetGroups(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetGroups", ReplyAction="http://tempuri.org/IBaseService/GetGroupsResponse")]
        System.Threading.Tasks.Task<byte[]> GetGroupsAsync(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetGroupUsers", ReplyAction="http://tempuri.org/IBaseService/GetGroupUsersResponse")]
        byte[] GetGroupUsers(string groupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetGroupUsers", ReplyAction="http://tempuri.org/IBaseService/GetGroupUsersResponse")]
        System.Threading.Tasks.Task<byte[]> GetGroupUsersAsync(string groupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetGroupFuncs", ReplyAction="http://tempuri.org/IBaseService/GetGroupFuncsResponse")]
        byte[] GetGroupFuncs(string groupCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetGroupFuncs", ReplyAction="http://tempuri.org/IBaseService/GetGroupFuncsResponse")]
        System.Threading.Tasks.Task<byte[]> GetGroupFuncsAsync(string groupCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateGroupFunc", ReplyAction="http://tempuri.org/IBaseService/UpdateGroupFuncResponse")]
        byte[] UpdateGroupFunc(byte[] group, byte[] userList, byte[] funcList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateGroupFunc", ReplyAction="http://tempuri.org/IBaseService/UpdateGroupFuncResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateGroupFuncAsync(byte[] group, byte[] userList, byte[] funcList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/RemovebyGroup", ReplyAction="http://tempuri.org/IBaseService/RemovebyGroupResponse")]
        byte[] RemovebyGroup(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/RemovebyGroup", ReplyAction="http://tempuri.org/IBaseService/RemovebyGroupResponse")]
        System.Threading.Tasks.Task<byte[]> RemovebyGroupAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelsByGroup", ReplyAction="http://tempuri.org/IBaseService/GetModelsByGroupResponse")]
        byte[] GetModelsByGroup(byte[] search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelsByGroup", ReplyAction="http://tempuri.org/IBaseService/GetModelsByGroupResponse")]
        System.Threading.Tasks.Task<byte[]> GetModelsByGroupAsync(byte[] search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByGroup", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByGroupResponse")]
        byte[] GetPagingModelsByGroup(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByGroup", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByGroupResponse")]
        System.Threading.Tasks.Task<byte[]> GetPagingModelsByGroupAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByGroup", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByGroupResponse")]
        byte[] DeleteEntityByGroup(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByGroup", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByGroupResponse")]
        System.Threading.Tasks.Task<byte[]> DeleteEntityByGroupAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByGroup", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByGroupResponse")]
        byte[] UpdateEntityByGroup(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByGroup", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByGroupResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateEntityByGroupAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByGroup", ReplyAction="http://tempuri.org/IBaseService/AddEntityByGroupResponse")]
        byte[] AddEntityByGroup(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByGroup", ReplyAction="http://tempuri.org/IBaseService/AddEntityByGroupResponse")]
        System.Threading.Tasks.Task<byte[]> AddEntityByGroupAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByGroup", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByGroupResponse")]
        byte[] ExistEntityByGroup(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByGroup", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByGroupResponse")]
        System.Threading.Tasks.Task<byte[]> ExistEntityByGroupAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetDictionarys", ReplyAction="http://tempuri.org/IBaseService/GetDictionarysResponse")]
        byte[] GetDictionarys();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetDictionarys", ReplyAction="http://tempuri.org/IBaseService/GetDictionarysResponse")]
        System.Threading.Tasks.Task<byte[]> GetDictionarysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelsByDic", ReplyAction="http://tempuri.org/IBaseService/GetModelsByDicResponse")]
        byte[] GetModelsByDic(byte[] whereLambda);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetModelsByDic", ReplyAction="http://tempuri.org/IBaseService/GetModelsByDicResponse")]
        System.Threading.Tasks.Task<byte[]> GetModelsByDicAsync(byte[] whereLambda);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByDic", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByDicResponse")]
        byte[] GetPagingModelsByDic(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByDic", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByDicResponse")]
        System.Threading.Tasks.Task<byte[]> GetPagingModelsByDicAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByDic", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByDicResponse")]
        byte[] DeleteEntityByDic(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByDic", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByDicResponse")]
        System.Threading.Tasks.Task<byte[]> DeleteEntityByDicAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByDic", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByDicResponse")]
        byte[] UpdateEntityByDic(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByDic", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByDicResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateEntityByDicAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByDic", ReplyAction="http://tempuri.org/IBaseService/AddEntityByDicResponse")]
        byte[] AddEntityByDic(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByDic", ReplyAction="http://tempuri.org/IBaseService/AddEntityByDicResponse")]
        System.Threading.Tasks.Task<byte[]> AddEntityByDicAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByDic", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByDicResponse")]
        byte[] ExistEntityByDic(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByDic", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByDicResponse")]
        System.Threading.Tasks.Task<byte[]> ExistEntityByDicAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetUvs", ReplyAction="http://tempuri.org/IBaseService/GetUvsResponse")]
        byte[] GetUvs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetUvs", ReplyAction="http://tempuri.org/IBaseService/GetUvsResponse")]
        System.Threading.Tasks.Task<byte[]> GetUvsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetTableStatus", ReplyAction="http://tempuri.org/IBaseService/GetTableStatusResponse")]
        byte[] GetTableStatus(string tableName, string nameSpace, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetTableStatus", ReplyAction="http://tempuri.org/IBaseService/GetTableStatusResponse")]
        System.Threading.Tasks.Task<byte[]> GetTableStatusAsync(string tableName, string nameSpace, string desc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByDicType", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByDicTypeResponse")]
        byte[] GetPagingModelsByDicType(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/GetPagingModelsByDicType", ReplyAction="http://tempuri.org/IBaseService/GetPagingModelsByDicTypeResponse")]
        System.Threading.Tasks.Task<byte[]> GetPagingModelsByDicTypeAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByDicType", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByDicTypeResponse")]
        byte[] DeleteEntityByDicType(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/DeleteEntityByDicType", ReplyAction="http://tempuri.org/IBaseService/DeleteEntityByDicTypeResponse")]
        System.Threading.Tasks.Task<byte[]> DeleteEntityByDicTypeAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByDicType", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByDicTypeResponse")]
        byte[] UpdateEntityByDicType(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/UpdateEntityByDicType", ReplyAction="http://tempuri.org/IBaseService/UpdateEntityByDicTypeResponse")]
        System.Threading.Tasks.Task<byte[]> UpdateEntityByDicTypeAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByDicType", ReplyAction="http://tempuri.org/IBaseService/AddEntityByDicTypeResponse")]
        byte[] AddEntityByDicType(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/AddEntityByDicType", ReplyAction="http://tempuri.org/IBaseService/AddEntityByDicTypeResponse")]
        System.Threading.Tasks.Task<byte[]> AddEntityByDicTypeAsync(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByDicType", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByDicTypeResponse")]
        byte[] ExistEntityByDicType(byte[] entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseService/ExistEntityByDicType", ReplyAction="http://tempuri.org/IBaseService/ExistEntityByDicTypeResponse")]
        System.Threading.Tasks.Task<byte[]> ExistEntityByDicTypeAsync(byte[] entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBaseServiceChannel : ZFS.ServerBusiness.ServiceReference.IBaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BaseServiceClient : System.ServiceModel.ClientBase<ZFS.ServerBusiness.ServiceReference.IBaseService>, ZFS.ServerBusiness.ServiceReference.IBaseService {
        
        public BaseServiceClient() {
        }
        
        public BaseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BaseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BaseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte[] GetModelByAccount(string account) {
            return base.Channel.GetModelByAccount(account);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetModelByAccountAsync(string account) {
            return base.Channel.GetModelByAccountAsync(account);
        }
        
        public byte[] Logout(string account) {
            return base.Channel.Logout(account);
        }
        
        public System.Threading.Tasks.Task<byte[]> LogoutAsync(string account) {
            return base.Channel.LogoutAsync(account);
        }
        
        public byte[] Login(string account, string password) {
            return base.Channel.Login(account, password);
        }
        
        public System.Threading.Tasks.Task<byte[]> LoginAsync(string account, string password) {
            return base.Channel.LoginAsync(account, password);
        }
        
        public byte[] GetAuthority(string account) {
            return base.Channel.GetAuthority(account);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAuthorityAsync(string account) {
            return base.Channel.GetAuthorityAsync(account);
        }
        
        public byte[] GetModelsByUser(byte[] search) {
            return base.Channel.GetModelsByUser(search);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetModelsByUserAsync(byte[] search) {
            return base.Channel.GetModelsByUserAsync(search);
        }
        
        public byte[] GetPagingModelsByUser(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByUser(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPagingModelsByUserAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByUserAsync(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public byte[] DeleteEntityByUser(byte[] entity) {
            return base.Channel.DeleteEntityByUser(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> DeleteEntityByUserAsync(byte[] entity) {
            return base.Channel.DeleteEntityByUserAsync(entity);
        }
        
        public byte[] UpdateEntityByUser(byte[] entity) {
            return base.Channel.UpdateEntityByUser(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateEntityByUserAsync(byte[] entity) {
            return base.Channel.UpdateEntityByUserAsync(entity);
        }
        
        public byte[] AddEntityByUser(byte[] entity) {
            return base.Channel.AddEntityByUser(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> AddEntityByUserAsync(byte[] entity) {
            return base.Channel.AddEntityByUserAsync(entity);
        }
        
        public byte[] ExistEntityByUser(byte[] entity) {
            return base.Channel.ExistEntityByUser(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExistEntityByUserAsync(byte[] entity) {
            return base.Channel.ExistEntityByUserAsync(entity);
        }
        
        public byte[] GetMenuTrees() {
            return base.Channel.GetMenuTrees();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetMenuTreesAsync() {
            return base.Channel.GetMenuTreesAsync();
        }
        
        public byte[] UpdateMenus(byte[] MenusBytes) {
            return base.Channel.UpdateMenus(MenusBytes);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateMenusAsync(byte[] MenusBytes) {
            return base.Channel.UpdateMenusAsync(MenusBytes);
        }
        
        public byte[] GetModelsByMenu(byte[] search) {
            return base.Channel.GetModelsByMenu(search);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetModelsByMenuAsync(byte[] search) {
            return base.Channel.GetModelsByMenuAsync(search);
        }
        
        public byte[] GetPagingModelsByMenu(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByMenu(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPagingModelsByMenuAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByMenuAsync(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public byte[] DeleteEntityByMenu(byte[] entity) {
            return base.Channel.DeleteEntityByMenu(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> DeleteEntityByMenuAsync(byte[] entity) {
            return base.Channel.DeleteEntityByMenuAsync(entity);
        }
        
        public byte[] UpdateEntityByMenu(byte[] entity) {
            return base.Channel.UpdateEntityByMenu(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateEntityByMenuAsync(byte[] entity) {
            return base.Channel.UpdateEntityByMenuAsync(entity);
        }
        
        public byte[] AddEntityByMenu(byte[] entity) {
            return base.Channel.AddEntityByMenu(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> AddEntityByMenuAsync(byte[] entity) {
            return base.Channel.AddEntityByMenuAsync(entity);
        }
        
        public byte[] ExistEntityByMenu(byte[] entity) {
            return base.Channel.ExistEntityByMenu(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExistEntityByMenuAsync(byte[] entity) {
            return base.Channel.ExistEntityByMenuAsync(entity);
        }
        
        public byte[] GetGroups(string search) {
            return base.Channel.GetGroups(search);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetGroupsAsync(string search) {
            return base.Channel.GetGroupsAsync(search);
        }
        
        public byte[] GetGroupUsers(string groupID) {
            return base.Channel.GetGroupUsers(groupID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetGroupUsersAsync(string groupID) {
            return base.Channel.GetGroupUsersAsync(groupID);
        }
        
        public byte[] GetGroupFuncs(string groupCode) {
            return base.Channel.GetGroupFuncs(groupCode);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetGroupFuncsAsync(string groupCode) {
            return base.Channel.GetGroupFuncsAsync(groupCode);
        }
        
        public byte[] UpdateGroupFunc(byte[] group, byte[] userList, byte[] funcList) {
            return base.Channel.UpdateGroupFunc(group, userList, funcList);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateGroupFuncAsync(byte[] group, byte[] userList, byte[] funcList) {
            return base.Channel.UpdateGroupFuncAsync(group, userList, funcList);
        }
        
        public byte[] RemovebyGroup(int id) {
            return base.Channel.RemovebyGroup(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> RemovebyGroupAsync(int id) {
            return base.Channel.RemovebyGroupAsync(id);
        }
        
        public byte[] GetModelsByGroup(byte[] search) {
            return base.Channel.GetModelsByGroup(search);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetModelsByGroupAsync(byte[] search) {
            return base.Channel.GetModelsByGroupAsync(search);
        }
        
        public byte[] GetPagingModelsByGroup(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByGroup(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPagingModelsByGroupAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByGroupAsync(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public byte[] DeleteEntityByGroup(byte[] entity) {
            return base.Channel.DeleteEntityByGroup(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> DeleteEntityByGroupAsync(byte[] entity) {
            return base.Channel.DeleteEntityByGroupAsync(entity);
        }
        
        public byte[] UpdateEntityByGroup(byte[] entity) {
            return base.Channel.UpdateEntityByGroup(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateEntityByGroupAsync(byte[] entity) {
            return base.Channel.UpdateEntityByGroupAsync(entity);
        }
        
        public byte[] AddEntityByGroup(byte[] entity) {
            return base.Channel.AddEntityByGroup(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> AddEntityByGroupAsync(byte[] entity) {
            return base.Channel.AddEntityByGroupAsync(entity);
        }
        
        public byte[] ExistEntityByGroup(byte[] entity) {
            return base.Channel.ExistEntityByGroup(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExistEntityByGroupAsync(byte[] entity) {
            return base.Channel.ExistEntityByGroupAsync(entity);
        }
        
        public byte[] GetDictionarys() {
            return base.Channel.GetDictionarys();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetDictionarysAsync() {
            return base.Channel.GetDictionarysAsync();
        }
        
        public byte[] GetModelsByDic(byte[] whereLambda) {
            return base.Channel.GetModelsByDic(whereLambda);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetModelsByDicAsync(byte[] whereLambda) {
            return base.Channel.GetModelsByDicAsync(whereLambda);
        }
        
        public byte[] GetPagingModelsByDic(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByDic(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPagingModelsByDicAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByDicAsync(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public byte[] DeleteEntityByDic(byte[] entity) {
            return base.Channel.DeleteEntityByDic(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> DeleteEntityByDicAsync(byte[] entity) {
            return base.Channel.DeleteEntityByDicAsync(entity);
        }
        
        public byte[] UpdateEntityByDic(byte[] entity) {
            return base.Channel.UpdateEntityByDic(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateEntityByDicAsync(byte[] entity) {
            return base.Channel.UpdateEntityByDicAsync(entity);
        }
        
        public byte[] AddEntityByDic(byte[] entity) {
            return base.Channel.AddEntityByDic(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> AddEntityByDicAsync(byte[] entity) {
            return base.Channel.AddEntityByDicAsync(entity);
        }
        
        public byte[] ExistEntityByDic(byte[] entity) {
            return base.Channel.ExistEntityByDic(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExistEntityByDicAsync(byte[] entity) {
            return base.Channel.ExistEntityByDicAsync(entity);
        }
        
        public byte[] GetUvs() {
            return base.Channel.GetUvs();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetUvsAsync() {
            return base.Channel.GetUvsAsync();
        }
        
        public byte[] GetTableStatus(string tableName, string nameSpace, string desc) {
            return base.Channel.GetTableStatus(tableName, nameSpace, desc);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetTableStatusAsync(string tableName, string nameSpace, string desc) {
            return base.Channel.GetTableStatusAsync(tableName, nameSpace, desc);
        }
        
        public byte[] GetPagingModelsByDicType(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByDicType(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPagingModelsByDicTypeAsync(int pageIndex, int pageSize, byte[] whereLambda, bool Asc) {
            return base.Channel.GetPagingModelsByDicTypeAsync(pageIndex, pageSize, whereLambda, Asc);
        }
        
        public byte[] DeleteEntityByDicType(byte[] entity) {
            return base.Channel.DeleteEntityByDicType(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> DeleteEntityByDicTypeAsync(byte[] entity) {
            return base.Channel.DeleteEntityByDicTypeAsync(entity);
        }
        
        public byte[] UpdateEntityByDicType(byte[] entity) {
            return base.Channel.UpdateEntityByDicType(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> UpdateEntityByDicTypeAsync(byte[] entity) {
            return base.Channel.UpdateEntityByDicTypeAsync(entity);
        }
        
        public byte[] AddEntityByDicType(byte[] entity) {
            return base.Channel.AddEntityByDicType(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> AddEntityByDicTypeAsync(byte[] entity) {
            return base.Channel.AddEntityByDicTypeAsync(entity);
        }
        
        public byte[] ExistEntityByDicType(byte[] entity) {
            return base.Channel.ExistEntityByDicType(entity);
        }
        
        public System.Threading.Tasks.Task<byte[]> ExistEntityByDicTypeAsync(byte[] entity) {
            return base.Channel.ExistEntityByDicTypeAsync(entity);
        }
    }
}
